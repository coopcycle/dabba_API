# This file is the entry point to configure your own services.
# Files in the packages/ subdirectory configure your dependencies.

# Put parameters here that don't need to change on each machine where the app is deployed
# https://symfony.com/doc/current/best_practices/configuration.html#application-related-configuration
parameters:
    app.transactional_mail_sender: '%env(TRANSACTIONAL_MAIL_SENDER)%'
    app.path.restaurant_images: /uploads/images/restaurant
    app.path.cms_images: /uploads/images/cms
    app.api.client_id: '%env(API_CLIENT_ID)%'
    app.api.client_secret: '%env(API_CLIENT_SECRET)%'
    app.system_pay.client_id: '%env(API_SYSTEM_PAY_CLIENT_ID)%'
    app.system_pay.client_secret: '%env(API_SYSTEM_PAY_CLIENT_SECRET)%'
    app.system_pay.public_key: '%env(API_SYSTEM_PAY_PUBLIC_KEY)%'
    app.system_pay.hmac: '%env(API_SYSTEM_PAY_HMAC)%'
    app.allow_negative_stock: '%env(ALLOW_NEGATIVE_STOCK)%'
    app.env: '%env(APP_ENV)%'
services:
    # default configuration for services in *this* file
    _defaults:
        autowire: true      # Automatically injects dependencies in your services.
        autoconfigure: true # Automatically registers your services as commands, event subscribers, etc.

    # makes classes in src/ available to be used as services
    # this creates a service per class whose id is the fully-qualified class name
    App\:
        resource: '../src/'
        exclude:
            - '../src/DependencyInjection/'
            - '../src/Entity/'
            - '../src/Kernel.php'
            - '../src/Tests/'
            - '../src/Service/'

    # controllers are imported separately to make sure services can be injected
    # as action arguments even if you don't extend any base controller class
    App\Controller\:
        resource: '../src/Controller/'
        tags: ['controller.service_arguments']

    # add more service definitions when explicit configuration is needed
    # please note that last definitions always *replace* previous ones
    App\Service\Place:
        class: App\Service\Place
        public: true
        arguments:
            - '@csa_guzzle.client.google_maps'
            - '@jms_serializer'
            - '%env(GMAP_API_KEY)%'
            - '@logger'
    App\Service\GSheets:
        class: App\Service\GSheets
        public: true
        arguments:
            - '@logger'
            - '%env(GSHEET_DOCUMENT_ID)%'
            - '%env(JSON_CREDENTIALS_FILE)%'
    App\Service\SystemPay:
        public: true
        arguments:
            - '@csa_guzzle.client.system_pay'
            - '@jms_serializer'
            - '%env(API_SYSTEM_PAY_CLIENT_ID)%'
            - '%env(API_SYSTEM_PAY_CLIENT_SECRET)%'
            - '%env(API_SYSTEM_PAY_PUBLIC_KEY)%'
            - '%env(API_SYSTEM_PAY_HMAC)%'
            - '@router'
            - '@logger'
    League\OAuth2\Server\AuthorizationServer:
        arguments:
            $clientRepository: '@App\Infrastructure\oAuth2Server\Bridge\ClientRepository'
            $accessTokenRepository: '@App\Infrastructure\oAuth2Server\Bridge\AccessTokenRepository'
            $scopeRepository: '@App\Infrastructure\oAuth2Server\Bridge\ScopeRepository'
            $privateKey: '%env(OAUTH2_PRIVATE_KEY)%'
            $encryptionKey: '%env(OAUTH2_ENCRYPTION_KEY)%'
    League\OAuth2\Server\Grant\PasswordGrant:
        arguments:
            $userRepository: '@App\Infrastructure\oAuth2Server\Bridge\UserRepository'
            $refreshTokenRepository: '@App\Infrastructure\oAuth2Server\Bridge\RefreshTokenRepository'
    League\OAuth2\Server\Grant\RefreshTokenGrant:
        arguments:
            $refreshTokenRepository: '@App\Infrastructure\oAuth2Server\Bridge\RefreshTokenRepository'
    App\MyResourceServer:
        arguments:
            $accessTokenRepository: '@App\Infrastructure\oAuth2Server\Bridge\AccessTokenRepository'
            $publicKey: '%env(OAUTH2_PUBLIC_KEY)%'
    App\EventListener\PaymentTokenListener:
        class: App\EventListener\PaymentTokenListener
        tags:
            - name: doctrine.orm.entity_listener
              event: postRemove
              entity: App\Entity\PaymentToken
        arguments:
            $systemPay: '@App\Service\SystemPay'
    App\EventListener\TradetListener:
        class: App\EventListener\TradetListener
        tags :
            - name: doctrine.orm.entity_listener
              event: prePersist
              entity: App\Entity\Trade
            - name: doctrine.orm.entity_listener
              event: postPersist
              entity: App\Entity\Trade
        arguments:
            $allowNegativeStock: '%env(ALLOW_NEGATIVE_STOCK)%'
    App\EventListener\RestaurantListener:
        class: App\EventListener\RestaurantListener
        tags :
            - name: doctrine.orm.entity_listener
              event: preUpdate
              entity: App\Entity\Restaurant
            - name: doctrine.orm.entity_listener
              event: prePersist
              entity: App\Entity\Restaurant
            - name: doctrine.orm.entity_listener
              event: postPersist
              entity: App\Entity\Restaurant
            - name: doctrine.orm.entity_listener
              event: preRemove
              entity: App\Entity\Restaurant
        arguments:
            $place: '@App\Service\Place'
            $token_storage: '@security.token_storage'
    App\Doctrine\VisibleRestaurantExtension:
        class: App\Doctrine\VisibleRestaurantExtension
        tags:
            - { name: api_platform.doctrine.orm.query_extension.collection, priority: 9 }